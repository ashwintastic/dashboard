/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright Â© 2014-2016 Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

/* eslint-disable max-len */
import { LogLevel } from 'botworx-utils/lib/logger';

export const port = process.env.PORT || 3000;
export const host = process.env.HOST || `localhost:${port}`;
export const linkHost = process.env.HOST || `localhost:3001`;

export const databaseUrl = process.env.DATABASE_URL || 'sqlite:database.sqlite';

export const resourceList = {
  '/api/metrics/:accountId/:botId/:metric': {
    entity: 'metrics',
    action: 'viewAnalytics'
  },
  '/api/accounts/list/:userId': {
    entity: 'loggedInUser',
    action: 'getAccounts'
  },
  '/api/accounts/:accountId': {
    entity: 'account',
    action: 'getAccountData'
  },
  '/api/accounts/:accountId/bots': {
    entity: 'account',
    action: 'getBots'
  },
  '/api/accounts/:accountId/botlist': {
    entity: 'bot',
    action: 'create'
  },
  '/api/accounts/:accountId/bots/:botId': {
    entity: 'bot',
    action: 'getBotData'
  },
  '/api/accounts/:accountId/botlist/:botId': {
    entity: 'bot',
    action: ['delete', 'save']
  },
  '/api/flow/bot/:botId/:flowId': {
    entity: 'flow',
    action: ['save', 'delete', 'clone']
  },
  '/api/users/:userId/accounts/bots/pagelist': {
    entity: 'page',
    action: 'requestAccessToken'
  },
  '/api/makeliveflow/:botId/:flowId': {
    entity: 'flow',
    action: 'changeLiveFlow'
  },
  '/api/revertFlow/:botId': {
    entity: 'flow',
    action: 'revertFlow'
  },
  '/api/accounts/:accountId/bots/:botId/platformbot/:platformBotId/:accesstoken': {
    entity: 'platformBot',
    action: 'delete'
  },
  '/api/accounts/:accountId/bots/:botId/platformbot': {
    entity: 'platformBot',
    action: 'create'
  }
};

export const log = {
  app: { name: 'dashboard-logs', loglevel: LogLevel.DEBUG },
  db: { name: 'db-logs', loglevel: LogLevel.INFO },
}

export const db = {
  url: process.env.DB_URL || 'mongodb://localhost/botworx',
  aclUrl: process.env.DB_ACLURL || 'mongodb://localhost/acl',
  agendaUrl: process.env.DB_AGENDAURL || 'mongodb://localhost/agenda',
  config: {
    autoIndex: false,
  },
};

export const elastic = {
  host: process.env.ELASTIC_HOST || 'localhost:9200',
  log: 'error',
  botAnalytics: {
    index: 'chat_index',
    type: 'chat_details',
  },
};

export const analytics = {
  // https://analytics.google.com/
  google: {
    trackingId: process.env.ANALYTICS_GOOGLE_TRACKINGID, // UA-XXXXX-X
  },
};

export const auth = {

  jwt: { secret: process.env.AUTH_JWT_SECRET || 'React Starter Kit' },

  // https://developers.facebook.com/
  facebook: {
    id: process.env.AUTH_FACEBOOK_APPID || '900617613376037',
    secret: process.env.AUTH_FACEBOOK_APPSECRET || '74e1312c4adb2572e7aa1b743805be9b',
    testPageId: process.env.AUTH_FACEBOOK_TESTPAGEID || '1201407956580516',
    graphApiBase: `https://graph.facebook.com/v2.8`
  },
};

export const botEngine = {
  url: process.env.BOTENGINE_URL || 'https://ia.botworx.ai'
};

export const mailerConfig = {
  host: 'smtp.gmail.com',
  port: 465,
  secure: true, // use SSL
  auth: {
    user: process.env.MAILERCONFIG_AUTH_USER,
    pass: process.env.MAILERCONFIG_AUTH_PASS,
  }
};

export const botworx = {
  permissions: {
    required: {
      'manage_pages': 'Manage your Pages',
      'pages_messaging': 'Send messages from Pages you manage',
      'pages_messaging_subscriptions': 'Send messages from Pages you manage at any time after the first user interaction',
      'pages_messaging_phone_number': 'Use a user phone number to send messages from Pages you manage',
    },
    optional: {
    },
  }
}

export const notificationConfig = {
  success: {
    autoDismiss: 5,
    position: 'tr'
  },
  error: {
    autoDismiss: 10,
    position: 'tr'
  }
}

export const userRoleList = {
  SuperAdmin: {
    createRole: ['SuperAdmin', 'BotworxAdmin', 'AccountOwner', 'AccountEditor', 'BotOwner', 'BotEditor'],
  },
  BotworxAdmin: {
    createRole: ['BotworxAdmin', 'AccountOwner', 'AccountEditor', 'BotOwner', 'BotEditor']
  },
  AccountOwner: {
    createRole: ['AccountOwner', 'AccountEditor', 'BotOwner', 'BotEditor']
  },
  AccountEditor: {
    createRole: ['AccountEditor', 'BotOwner', 'BotEditor']
  },
  BotOwner: {
    createRole: ['BotOwner', 'BotEditor']
  },
  BotEditor: {
    createRole: ['BotEditor']
  },
}

export const POLL_STATUS ={
    ACTIVE:'active',
    CLOSED:'closed',
    PENDING:'pending',
    INACTIVE:'inactive',
}